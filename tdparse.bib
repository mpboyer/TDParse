@book{altshulerSemanticsPluralsFocus2019,
  title = {The {{Semantics}} of {{Plurals}}, {{Focus}}, {{Degrees}}, and {{Times}}: {{Essays}} in {{Honor}} of {{Roger Schwarzschild}}},
  shorttitle = {The {{Semantics}} of {{Plurals}}, {{Focus}}, {{Degrees}}, and {{Times}}},
  editor = {Altshuler, Daniel and Rett, Jessica},
  year = {2019},
  publisher = {Springer International Publishing},
  address = {Cham},
  doi = {10.1007/978-3-030-04438-1},
  urldate = {2025-03-20},
  copyright = {http://www.springer.com/tdm},
  isbn = {978-3-030-04437-4 978-3-030-04438-1},
  langid = {english},
  keywords = {interface of semantics and pragmatics,ontological domains,semantics of elements,Syntax-Semantics interface,Theoretical linguistics},
  file = {/home/matthieu/Zotero/storage/B85FSQSJ/Altshuler et Rett - 2019 - The Semantics of Plurals, Focus, Degrees, and Time.pdf}
}

@book{barkerDirectCompositionality2007,
  title = {Direct {{Compositionality}}},
  author = {Barker, Chris and Jacobson, Pauline},
  year = {2007},
  publisher = {Oxford University Press, Incorporated},
  address = {Oxford, UNITED KINGDOM},
  urldate = {2025-03-24},
  abstract = {This book examines the hypothesis of "direct compositionality", which requires that semantic interpretation proceed in tandem with syntactic combination. Although associated with the dominant view in formal semantics of the 1970s and 1980s, the feasibility of direct compositionality remained unsettled, and more recently the discussion as to whether or not this view can be maintained has receded. The syntax-semantics interaction is now often seen as a process in which the syntax builds representations which, at the abstract level of logical form, are sent for interpretation to the semantics component of the language faculty. In the first extended discussion of the hypothesis of direct compositionality for twenty years, this book considers whether its abandonment might have been premature and whether in fact direct compositionality is not after all a simpler and more effective conception of the grammar than the conventional account of the syntax-semantics interface in generative grammar. It contains contributions from both sides of the debate, locates the debate in the setting of a variety of formal theories, and draws on examples from a range of languages and a range of empirical phenomena.},
  isbn = {978-0-19-152540-7},
  keywords = {Semantics},
  file = {/home/matthieu/Zotero/storage/QMTIVT7H/detail.html}
}

@article{bauerEffectSystemAlgebraic2014,
  title = {An {{Effect System}} for {{Algebraic Effects}} and {{Handlers}}},
  author = {Bauer, Andrej and Pretnar, Matija},
  year = {2014},
  month = dec,
  journal = {Logical Methods in Computer Science},
  volume = {Volume 10, Issue 4},
  publisher = {Episciences.org},
  issn = {1860-5974},
  doi = {10.2168/LMCS-10(4:9)2014},
  urldate = {2025-03-13},
  abstract = {We present an effect system for core Eff, a simplified variant of Eff, which is an ML-style programming language with first-class algebraic effects and handlers. We define an expressive effect system and prove safety of operational semantics with respect to it. Then we give a domain-theoretic denotational semantics of core Eff, using Pitts's theory of minimal invariant relations, and prove it adequate. We use this fact to develop tools for finding useful contextual equivalences, including an induction principle. To demonstrate their usefulness, we use these tools to derive the usual equations for mutable state, including a general commutativity law for computations using non-interfering references. We have formalized the effect system, the operational semantics, and the safety theorem in Twelf.},
  file = {/home/matthieu/Zotero/storage/SVATSCYV/Bauer et Pretnar - 2014 - An Effect System for Algebraic Effects and Handler.pdf}
}

@article{boyerFormalizingTypingRules,
  title = {Formalizing {{Typing Rules}} for {{Natural Languages}} Using {{Effects}}},
  author = {Boyer, Matthieu},
  langid = {english},
  file = {/home/matthieu/Documents/Recherche/TDParse/tdparse.pdf}
}

@article{bumfordDynamicSemanticsStatic,
  title = {Dynamic Semantics with Static Types},
  author = {Bumford, Dylan and Charlow, Simon},
  abstract = {Semantic analyses of natural language typically rely on variables for the interpretation of binding relationships. This is true of standard static setups, where sentences might denote sets of variable assignments, as well as standard dynamic ones, where they might denote relations between (sets of) variable assignments. Several well-known alternative frameworks eschew object-language variables in favor of representing semantic dependencies as functional dependencies. This obviates assignments, and has the bene t that any expression's binding needs are discoverable directly from its type. But these popular variable-free approaches are limited to static, in-scope binding relationships, those in which dependents occur in the arguments of their binders. In this paper we develop a semantics that is variable-free in the same sense, but captures traditional notions of dynamic anaphora. We demonstrate the value of anaphoric type transparency with novel analyses of crossover, ellipsis, and sloppy/paycheck anaphora, and compare the new semantics, which introduces the notions of parameterized monads and lenses to the linguistics literature, with other list-based dynamic systems and other accounts of crossover.},
  langid = {english},
  file = {/home/matthieu/Zotero/storage/7YXJDB2T/Bumford et Charlow - Dynamic semantics with static types.pdf}
}

@article{bumfordEffectdrivenInterpretation,
  title = {Effect-Driven Interpretation},
  author = {Bumford, Dylan and Charlow, Simon},
  abstract = {Computer programs are often factored into pure components---simple, total functions from inputs to outputs---and components that may have side effects---errors, changes to memory, parallel threads, abortion of the current command, etc. In this course, we make the case that human languages are similarly organized around the give and pull of pure and effectful processes, and we'll aim to show how denotational techniques from computer science can be leveraged to support elegant and illuminating semantic analyses of natural language phenomena.},
  langid = {english},
  file = {/home/matthieu/Zotero/storage/HBBHXC72/Bumford et Charlow - DOI 10.xxxxxxxxxxxx (do not change) First publis.pdf}
}

@article{bumfordEffectfulCompositionNatural,
  title = {Effectful Composition in Natural Language Semantics - {{Introducing}} Functors},
  author = {Bumford, Dylan},
  langid = {english},
  file = {/home/matthieu/Zotero/storage/F5K7W8TS/Bumford - Effectful composition in natural language semantic.pdf}
}

@inproceedings{charlowModularTheoryPronouns2017,
  title = {A Modular Theory of Pronouns and Binding},
  author = {Charlow, Simon},
  year = {2017},
  urldate = {2025-03-13},
  abstract = {. I sketch a modular treatment of pronouns using applicative functors, monads, and then applicative functors (again!). This approach dissolves theoretical issues typical of standard accounts, and extends their empirical coverage to paycheck pronouns and binding reconstruction.},
  file = {/home/matthieu/Zotero/storage/RD4C6GRQ/Charlow - 2017 - A modular theory of pronouns and binding.pdf}
}

@article{charlowSemanticsExceptionalScope,
  title = {On the Semantics of Exceptional Scope},
  author = {Charlow, Simon},
  langid = {english},
  file = {/home/matthieu/Zotero/storage/H5PEK7QZ/Charlow - On the semantics of exceptional scope.pdf}
}

@book{dixonSemanticApproachEnglish2005,
  title = {A {{Semantic Approach}} to {{English Grammar}}},
  author = {Dixon, R. M. W.},
  year = {2005},
  publisher = {Oxford University Press, Incorporated},
  address = {Oxford, UNITED KINGDOM},
  urldate = {2025-03-19},
  abstract = {This book shows how grammar helps people communicate and looks at the ways grammar and meaning interrelate. The author starts from the notion that a speaker codes a meaning into grammatical forms which the listener is then able to recover: each word, he shows, has its own meaning and each bit of grammar its own function, their combinations creating and limiting the possibilities for different words. He uncovers a rationale for the varying grammatical properties of different words. and in the process explains many facts about English - such as why we can say I wish to go, I wish that he would go, and I want to go but not I want that he would go. -;This book shows how grammar helps people communicate and looks at the ways grammar and meaning interrelate. The author starts from the notion that a speaker codes a meaning into grammatical forms which the listener is then able to recover: each word, he shows, has its own meaning and each bit of grammar its own function, their combinations creating and limiting the possibilities for different words. He uncovers a rationale for the varying grammatical properties of different words. and in the process explains many facts about English - such as why we can say I wish to go, I wish that he would go, and I want to go but not I want that he would go. The first part of the book reviews the main points of English syntax and discusses English verbs in terms of their semantic types including those of Motion, Giving, Speaking, Liking, and Trying. In the second part Professor Dixon looks at eight grammatical topics, including complement clauses, transitivity and causatives, passives, and the promotion of a non-subject to subject, as in Dictionaries sell well. This is the updated and revised edition of A New Approach to English Grammar on Semantic Principles. It includes new chapters on tense and aspect, nominalizations and possession, and adverbs and negation, and contains a new discussion of comparative forms of adjectives. It also explains recent changes in English grammar, including how they has replaced the tabooed he as a pronoun referring to either gender, as in When a student reads this book, they will learn a. lot about English grammar in a most enjoyable manner. -},
  isbn = {978-0-19-153004-3},
  keywords = {English language -- Grammar.,English language -- Semantics.},
  file = {/home/matthieu/Zotero/storage/M5N528UL/Dixon - 2005 - A Semantic Approach to English Grammar.pdf;/home/matthieu/Zotero/storage/4XGVJ4XQ/detail.html}
}

@book{geeraertsTheoriesLexicalSemantics2010,
  title = {Theories of Lexical Semantics},
  author = {Geeraerts, Dirk},
  year = {2010},
  publisher = {Oxford University Press},
  address = {Oxford},
  isbn = {978-0-19-170628-8},
  keywords = {Linguistic change,Semantics Historical},
  file = {/home/matthieu/Zotero/storage/28HCNCED/12552561.html}
}

@book{heimSemanticsGenerativeGrammar1998,
  title = {Semantics in Generative Grammar},
  author = {Heim, Irene and Kratzer, Angelika},
  year = {1998},
  series = {Blackwell Textbooks in Linguistics},
  number = {13},
  publisher = {Blackwell},
  address = {Malden, MA},
  isbn = {978-0-631-19712-6 978-0-631-19713-3},
  langid = {english},
  lccn = {P325.5.G45 H45 1998},
  keywords = {Generative grammar,Semantics},
  file = {/home/matthieu/Zotero/storage/LUU4QX72/Heim et Kratzer - 1998 - Semantics in generative grammar.pdf}
}

@inproceedings{melliesFunctorsAreType2015,
  title = {Functors Are {{Type Refinement Systems}}},
  booktitle = {Proceedings of the 42nd {{Annual ACM SIGPLAN-SIGACT Symposium}} on {{Principles}} of {{Programming Languages}}},
  author = {Melli{\`e}s, Paul-Andr{\'e} and Zeilberger, Noam},
  year = {2015},
  month = jan,
  pages = {3--16},
  publisher = {ACM},
  address = {Mumbai India},
  doi = {10.1145/2676726.2676970},
  urldate = {2025-03-04},
  abstract = {The standard reading of type theory through the lens of category theory is based on the idea of viewing a type system as a category of well-typed terms. We propose a basic revision of this reading: rather than interpreting type systems as categories, we describe them as functors from a category of typing derivations to a category of underlying terms. Then, turning this around, we explain how in fact any functor gives rise to a generalized type system, with an abstract notion of typing judgment, typing derivations and typing rules. This leads to a purely categorical reformulation of various natural classes of type systems as natural classes of functors.},
  isbn = {978-1-4503-3300-9},
  langid = {english},
  file = {/home/matthieu/Zotero/storage/ENC3CS3B/Melliès et Zeilberger - 2015 - Functors are Type Refinement Systems.pdf}
}

@article{melliesLambdaCalculCategories,
  title = {{Lambda-Calcul et Cat{\'e}gories}},
  author = {Mellies, Paul-Andr{\'e}},
  langid = {french},
  file = {/home/matthieu/Documents/ETUDES/ENS/M1/S1/Info/Mellies/cours.pdf}
}

@inproceedings{moggiComputationalLambdacalculusMonads1989,
  title = {Computational Lambda-Calculus and Monads},
  booktitle = {[1989] {{Proceedings}}. {{Fourth Annual Symposium}} on {{Logic}} in {{Computer Science}}},
  author = {Moggi, E.},
  year = {1989},
  pages = {14--23},
  publisher = {IEEE Comput. Soc. Press},
  address = {Pacific Grove, CA, USA},
  doi = {10.1109/LICS.1989.39155},
  urldate = {2025-03-07},
  abstract = {The {$\lambda$}-calculus is considered an useful mathematical tool in the study of programming languages, since programs can be identified with {$\lambda$}-terms. However, if one goes further and uses {$\beta\eta$}-conversion to prove equivalence of programs, then a gross simplification1 is introduced, that may jeopardise the applicability of theoretical results to real situations. In this paper we introduce a new calculus based on a categorical semantics for computations. This calculus provides a correct basis for proving equivalence of programs, independent from any specific computational model.},
  isbn = {978-0-8186-1954-0},
  langid = {english},
  file = {/home/matthieu/Zotero/storage/XGQYMUFX/Moggi - 1989 - Computational lambda-calculus and monads.pdf}
}

@misc{MonadsEffects,
  title = {Monads and {{Effects}}},
  journal = {ResearchGate},
  urldate = {2025-03-13},
  abstract = {Access 135+ million publications and connect with 20+ million researchers. Join for free and gain visibility by uploading your research.},
  howpublished = {https://www.researchgate.net/publication/2806790\_Monads\_and\_Effects},
  langid = {english}
}

@article{mootSecondOrderLambda2011,
  title = {Second Order Lambda Calculus for Meaning Assembly: On the Logical Syntax of Plurals},
  shorttitle = {Second Order Lambda Calculus for Meaning Assembly},
  author = {Moot, Richard},
  year = {2011},
  month = jan,
  urldate = {2025-03-20},
  abstract = {Overview In order to model a number of phenomena of lexical pragmatics in a compositional framework, several contributions developed in our team [1, 4, 6, 5] have used the system F of Jean-Yves Girard (1971)[2, 3] to compose logical formulae},
  file = {/home/matthieu/Zotero/storage/JKFAA3HV/Second_order_lambda_calculus_for_meaning.pdf;/home/matthieu/Zotero/storage/K7N34WTW/Second_order_lambda_calculus_for_meaning_assembly_on_the_logical_syntax_of_plurals.html}
}

@inproceedings{nielsonTypeEffectSystems1999,
  title = {Type and {{Effect Systems}}},
  booktitle = {Correct {{System Design}}},
  author = {Nielson, Flemming and Nielson, Hanne Riis},
  editor = {Goos, Gerhard and Hartmanis, Juris and Van Leeuwen, Jan and Olderog, Ernst-R{\"u}diger and Steffen, Bernhard},
  year = {1999},
  volume = {1710},
  pages = {114--136},
  publisher = {Springer Berlin Heidelberg},
  address = {Berlin, Heidelberg},
  doi = {10.1007/3-540-48092-7_6},
  urldate = {2025-03-05},
  abstract = {The design and implementation of a correct system can benefit from employing static techniques for ensuring that the dynamic behaviour satisfies the specification. Many programming languages incorporate types for ensuring that certain operations are only applied to data of the appropriate form. A natural extension of type checking techniques is to enrich the types with annotations and effects that further describe intensional aspects of the dynamic behaviour.},
  isbn = {978-3-540-66624-0 978-3-540-48092-1},
  file = {/home/matthieu/Zotero/storage/FYMLVTAC/nielson-nielson-csd99.pdf}
}

@misc{OCamlLanguageExtensions,
  title = {{{OCaml}} - {{Language}} Extensions},
  urldate = {2025-03-13},
  howpublished = {https://ocaml.org/manual/5.3/effects.html\#s\%3Aeffects-shallow}
}

@article{parteeLecture2Lambda,
  title = {Lecture 2. {{Lambda}} Abstraction, {{NP}} Semantics, and a {{Fragment}} of {{English}}},
  author = {Partee, B},
  journal = {Formal Semantics},
  langid = {english},
  file = {/home/matthieu/Zotero/storage/BLXAQ26Q/Partee - Lecture 2. Lambda abstraction, NP semantics, and a.pdf}
}

@inproceedings{plotkinComputationalEffectsOperations2004,
  title = {Computational Effects and Operations: An Overview},
  shorttitle = {Computational Effects and Operations},
  booktitle = {Electronic {{Notes}} in {{Theoretical Computer Science}}},
  author = {Plotkin, Gordon and Power, A. J.},
  year = {2004},
  volume = {73},
  pages = {149--163},
  publisher = {Elsevier},
  issn = {1571-0661},
  doi = {10.1016/j.entcs.2004.08.008},
  urldate = {2025-03-17},
  langid = {english},
  file = {/home/matthieu/Zotero/storage/RTDDN4P5/Plotkin et Power - 2004 - Computational effects and operations an overview.pdf}
}

@article{plotkinHandlingAlgebraicEffects2013,
  title = {Handling {{Algebraic Effects}}},
  author = {Plotkin, Gordon D. and Pretnar, Matija},
  year = {2013},
  month = dec,
  journal = {Logical Methods in Computer Science},
  volume = {Volume 9, Issue 4},
  publisher = {Episciences.org},
  issn = {1860-5974},
  doi = {10.2168/LMCS-9(4:23)2013},
  urldate = {2025-03-13},
  abstract = {Algebraic effects are computational effects that can be represented by an equational theory whose operations produce the effects at hand. The free model of this theory induces the expected computational monad for the corresponding effect. Algebraic effects include exceptions, state, nondeterminism, interactive input/output, and time, and their combinations. Exception handling, however, has so far received no algebraic treatment. We present such a treatment, in which each handler yields a model of the theory for exceptions, and each handling construct yields the homomorphism induced by the universal property of the free model. We further generalise exception handlers to arbitrary algebraic effects. The resulting programming construct includes many previously unrelated examples from both theory and practice, including relabelling and restriction in Milner's CCS, timeout, rollback, and stream redirection.},
  file = {/home/matthieu/Zotero/storage/UA7JWGDC/Plotkin et Pretnar - 2013 - Handling Algebraic Effects.pdf}
}

@article{pretnarIntroductionAlgebraicEffects2015,
  title = {An {{Introduction}} to {{Algebraic Effects}} and {{Handlers}}. {{Invited}} Tutorial Paper},
  author = {Pretnar, Matija},
  year = {2015},
  month = dec,
  journal = {Electronic Notes in Theoretical Computer Science},
  volume = {319},
  pages = {19--35},
  issn = {15710661},
  doi = {10.1016/j.entcs.2015.12.003},
  urldate = {2025-03-13},
  abstract = {This paper is a tutorial on algebraic effects and handlers. In it, we explain what algebraic effects are, give ample examples to explain how handlers work, define an operational semantics and a type \& effect system, show how one can reason about effects, and give pointers for further reading.},
  copyright = {https://www.elsevier.com/tdm/userlicense/1.0/},
  langid = {english},
  file = {/home/matthieu/Zotero/storage/76T2XML2/Pretnar - 2015 - An Introduction to Algebraic Effects and Handlers..pdf}
}

@article{reynoldsMeaningTypesIntrinsic2000,
  title = {The {{Meaning}} of {{Types From Intrinsic}} to {{Extrinsic Semantics}}},
  author = {Reynolds, John C.},
  year = {2000},
  month = jun,
  journal = {BRICS Report Series},
  number = {32},
  issn = {1601-5355},
  doi = {10.7146/brics.v7i32.20167},
  urldate = {2025-03-14},
  abstract = {A definition of a typed language is said to be "intrinsic" if it assignsmeanings to typings rather than arbitrary phrases, so that ill-typedphrases are meaningless. In contrast, a definition is said to be "extrinsic"if all phrases have meanings that are independent of their typings,while typings represent properties of these meanings.For a simply typed lambda calculus, extended with recursion, subtypes,and named products, we give an intrinsic denotational semanticsand a denotational semantics of the underlying untyped language. Wethen establish a logical relations theorem between these two semantics,and show that the logical relations can be "bracketed" by retractionsbetween the domains of the two semantics. From these results, wederive an extrinsic semantics that uses partial equivalence relations.},
  copyright = {Copyright (c) 2015 BRICS Report Series},
  langid = {english},
  file = {/home/matthieu/Zotero/storage/ER8MVWGU/Reynolds - 2000 - The Meaning of Types From Intrinsic to Extrinsic S.pdf}
}

@article{schmittPluralitiesCategoriesPlural2019,
  title = {Pluralities across Categories and Plural Projection},
  author = {Schmitt, Viola},
  year = {2019},
  month = nov,
  journal = {Semantics and Pragmatics},
  volume = {12},
  pages = {17:1-55},
  issn = {1937-8912},
  doi = {10.3765/sp.12.17},
  urldate = {2025-03-20},
  abstract = {This paper proposes an extension of the class of plural expressions, a generalized analysis of the denotations of such expressions and a novel account of how they semantically combine with other elements in the sentence. The point of departure is the observation that definite plural DPs and and-coordinations with coordinates of several semantic categories share certain features --- in particular cumulativity---in the context of other plural expressions. Existing analyses of conjunction fail to derive these parallels and I propose that and-coordinations should be analyzed as denoting pluralities (of whatever kind of semantic object their conjuncts denote). This, in turn, raises the question of how pluralities combine with other material in the sentence. I show that a simple expansion of the standard analysis thereof, which puts the workload onto the predicate, is insufficient. I propose an alternative which is based on the idea that all semantic domains contain pluralities and involves plural projection. In this system, the truth-conditions of sentences containing plurality-denoting expressions are not due to the semantic expansion of the predicate (as in existing analyses), but the result of a step-by-step process: Once a plurality enters the derivation, the node immediately dominating it will also denote a plurality, namely of the values obtained by a particular combination of the plurality and the denotation of its sister. BibTeX info},
  copyright = {Copyright (c) 2019 Viola Schmitt},
  langid = {english},
  keywords = {conjunction,cross-categorial operations,cumulative composition,cumulativity,plurality},
  file = {/home/matthieu/Zotero/storage/Y9TUVJ8L/Schmitt - 2019 - Pluralities across categories and plural projectio.pdf}
}

@book{SemanticsTheories2019,
  title = {Semantics - {{Theories}}},
  year = {2019},
  month = feb,
  publisher = {De Gruyter Mouton},
  doi = {10.1515/9783110589245},
  urldate = {2025-03-19},
  abstract = {Now in paperback for the first time since its original publication, the material gathered here is perfect for anyone who needs a detailed and accessible introduction to the important semantic theories. Designed for a wide audience, it will be of great value to linguists, cognitive scientists, philosophers, and computer scientists working on natural language. The book covers theories of lexical semantics, cognitively oriented approaches to semantics, compositional theories of sentence semantics, and discourse semantics. This clear, elegant explanation of the key theories in semantics research is essential reading for anyone working in the area.},
  copyright = {De Gruyter expressly reserves the right to use all content for commercial text and data mining within the meaning of Section 44b of the German Copyright Act.},
  isbn = {978-3-11-058924-5},
  langid = {english},
  keywords = {Generative and Cognitive Linguistics,Linguistic Theories,Semantics},
  file = {/home/matthieu/Zotero/storage/8B2STNQX/2019 - Semantics - Theories.pdf}
}

@article{swartSemanticsPragmaticsPlurals2010,
  title = {The Semantics and Pragmatics of Plurals},
  author = {de Swart, Henri{\"e}tte and Farkas, Donka},
  year = {2010},
  month = mar,
  journal = {Semantics and Pragmatics},
  volume = {3},
  pages = {6:1-54},
  issn = {1937-8912},
  doi = {10.3765/sp.3.6},
  urldate = {2025-03-20},
  abstract = {This paper addresses the semantics and pragmatics of singular and plural nominals in languages that manifest a binary morphological number distinction within this category. We review the main challenges such an account has to meet, and develop an analysis which treats the plural morpheme as semantically relevant, and the singular form as not contributing any number restriction on its own but acquiring one when in competition with the plural form. The competition between singular and plural nominals is grounded in bidirectional optimization over form-meaning pairs. The main conceptual advantage our proposal has over recent alternative accounts is that it respects Horn's 'division of pragmatic labor', in that it treats morphologically marked forms as semantically marked, and morphologically unmarked forms as semantically unmarked. In our account, plural forms are polysemous between an exclusive plural sense, which enforces sum reference, and an inclusive sense, which allows both atoms and sums as possible witnesses. The analysis predicts that a plural form is pragmatically appropriate only in case sum values are among the intended referents. To account for the choice between these two senses in context we invoke the Strongest Meaning Hypothesis, an independently motivated pragmatic principle. Finally, we show how the approach we develop explains some puzzling contrasts in number marking between English "three/more children" and Hungarian "h{\'a}rom/t{\"o}bb gyerek" ('three/more child'), a problem that has not been properly accounted for in the literature so far. doi:10.3765/sp.3.6 BibTeX info},
  copyright = {Copyright (c) 2014 Henri{\"e}tte de Swart, Donka Farkas},
  langid = {english},
  keywords = {Hungarian,markedness,morphology,optimality theory,plural,pragmatics,semantics,singular,strongest meaning hypothesis},
  file = {/home/matthieu/Zotero/storage/2RLFMCTV/Swart et Farkas - 2010 - The semantics and pragmatics of plurals.pdf}
}

@inproceedings{wadlerTheoremsFree1989,
  title = {Theorems for Free!},
  booktitle = {Proceedings of the Fourth International Conference on {{Functional}} Programming Languages and Computer Architecture},
  author = {Wadler, Philip},
  year = {1989},
  month = nov,
  series = {{{FPCA}} '89},
  pages = {347--359},
  publisher = {Association for Computing Machinery},
  address = {New York, NY, USA},
  doi = {10.1145/99370.99404},
  urldate = {2025-03-24},
  isbn = {978-0-89791-328-7},
  file = {/home/matthieu/Zotero/storage/GBVTWTMB/Wadler - 1989 - Theorems for free!.pdf}
}

@article{wellsTypabilityTypeChecking1999,
  title = {Typability and Type Checking in {{System F}} Are Equivalent and Undecidable},
  author = {Wells, J. B.},
  year = {1999},
  month = jun,
  journal = {Annals of Pure and Applied Logic},
  volume = {98},
  number = {1},
  pages = {111--156},
  issn = {0168-0072},
  doi = {10.1016/S0168-0072(98)00047-5},
  urldate = {2025-03-11},
  abstract = {Girard and Reynolds independently invented System F (a.k.a. the second-order polymorphically typed lambda calculus) to handle problems in logic and computer programming language design, respectively. Viewing F in the Curry style, which associates types with untyped lambda terms, raises the questions of typability and type checking. Typability asks for a term whether there exists some type it can be given. Type checking asks, for a particular term and type, whether the term can be given that type. The decidability of these problems has been settled for restrictions and extensions of F and related systems and complexity lower-bounds have been determined for typability in F, but this report is the first to resolve whether these problems are decidable for System F. This report proves that type checking in F is undecidable, by a reduction from semi-unification, and that typability in F is undecidable, by a reduction from type checking. Because there is an easy reduction from typability to type checking, the two problems are equivalent. The reduction from type checking to typability uses a novel method of constructing lambda terms that simulate arbitrarily chosen type environments. All of the results also hold for the {$\lambda$}I-calculus.},
  keywords = {Lambda calculus,Semi-unification,System F,Typability,Type checking,Type inference},
  file = {/home/matthieu/Zotero/storage/2THFKMCM/S0168007298000475.html}
}
